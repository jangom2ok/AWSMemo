AWSTemplateFormatVersion: '2010-09-09'
Description: Test cfn Template

Parameters:
#InstanceTypeは作成するインスタンスのサイズや仕様を選択することができるようになります。
#Defaultの要素でインスタンスのデフォルト値を定義できます。
  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
    Description: Select EC2 instance type.
#EC2インスタンスとSSH通信を行うためのキーペアを選択することが出来るようになります。
  KeyPair:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: Select KeyPair name.

Mappings:
#RegionMapで定義したリージョンにしかインスタンスを展開できません。
#このファイルを使用して複数のリージョンでEC2を展開する場合は対応するリージョンのhvmを定義する必要があります。
    RegionMap:
      us-east-1:
        hvm: "ami-a4c7edb2"
      ap-northeast-1:
        hvm: "ami-3bd3c45c"

Resources:
#VPCを定義しています。
  cfnVpc:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '192.168.0.0/16'
      Tags:
        - Key: 'Name'
          Value: 'Basic_Vpc'
#11系のサブネットを定義しています。
#MapPublicIpOnLaunchをtrueにすることでこのサブネット配下のインスタンスがパブリックIPアドレスを保持できるようになります。
#ロードバランサを使用する場合はAvailabilityZoneを明示的に定義する必要があります。これはロードバランサの仕様で通信を振り分ける時に必ず複数のAvailabilityZoneを指定しなければならないからです。
  cfnSubnet11:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: '192.168.11.0/24'
      MapPublicIpOnLaunch: true
      AvailabilityZone: 'ap-northeast-1a'
      Tags:
        - Key: 'Name'
          Value: 'Basic_Subnet_11'
      VpcId: !Ref cfnVpc
#12系のサブネットを定義しています。
#上記に示したようにロードバランサの仕様があるため、こちらでは11系と異なるAvailabilityZoneを定義しています。
  cfnSubnet12:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: '192.168.12.0/24'
      MapPublicIpOnLaunch: true
      AvailabilityZone: 'ap-northeast-1c'
      Tags:
        - Key: 'Name'
          Value: 'Basic_Subnet_12'
      VpcId: !Ref cfnVpc
#SubnetRouteTableAssociationは作成したサブネットとルートテーブルを関連付けるためのリソースです。
#特に注意すべき点はありませんが、同じルートテーブルに複数のサブネットを定義する場合でも1つのリソースにまとめて定義することはできないようです。
  cfnSubnetRouteTableAssociation11:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref cfnRouteTable
      SubnetId: !Ref cfnSubnet11
#上記に示したようにこちらではルートテーブルに12系のサブネットを関連付けています。
  cfnSubnetRouteTableAssociation12:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref cfnRouteTable
      SubnetId: !Ref cfnSubnet12
#VPCで使用するInternetGatewayを定義しています。
#これを作成しなければVPCはインターネットに接続することができません。
  cfnInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: 'Name'
          Value: 'Basic_InternetGateway'
#GatewayAttachmentでは作成したInternetGatewayとVPCを関連付けしています。
#ここで関連付けすることでVPCがインターネットに接続できるようになります。
  cfnAttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref cfnVpc
      InternetGatewayId: !Ref cfnInternetGateway
#RouteTableを定義しています。
#RouteTableで使用するRouteはRouteリソースで定義します。
  cfnRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Key: 'Name'
          Value: 'Basic_RouteTable'
      VpcId: !Ref cfnVpc
#RouteTableで使用するDefaultGatewayを定義しています。
#localのRouteは自動で定義されますが、0.0.0.0/0(DefaultGateway)は手動で定義してあげる必要があります。
  cfnDefaultGateway:
    Type: 'AWS::EC2::Route'
    DependsOn: cfnInternetGateway
    Properties:
      RouteTableId: !Ref cfnRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref cfnInternetGateway
#EC2インスタンスを定義しています。
#ImageIdではMappingブロックで定義したRegionMapを使用しています。
#SecurityGroupIdsでこのインスタンスに適用するSecurityGroupを定義しています。ここではポート80番と22番の通信を許可しています。
  cfnEC2Instance11:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !FindInMap [ RegionMap, !Ref "AWS::Region", hvm]
      InstanceType: !Ref InstanceType
      SubnetId: !Ref cfnSubnet11
      Tags:
        - Key: 'Name'
          Value: 'Basic_EC2Instance_11'
      KeyName: !Ref KeyPair
      SecurityGroupIds:
        - !Ref cfnEC2SecurityGroup
        - !Ref cfnEC2SSHSecurityGroup
#tcpの80番ポートを使用するためのSecurityGroupを定義しています。
  cfnEC2SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "EC2SecurityGroup"
      VpcId: !Ref cfnVpc
      Tags:
        - Key: 'Name'
          Value: 'Basic_SecurityGroup'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
#tcpの22番ポートを使用するためのSecurityGroupを定義しています。
  cfnEC2SSHSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "EC2SecurityGroup"
      VpcId: !Ref cfnVpc
      Tags:
        - Key: 'Name'
          Value: 'Basic_SecurityGroupSSH'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
#ALBで使用するSecurityGroupを定義しています。
  cfnALBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "ALBSecurityGroup"
      VpcId: !Ref cfnVpc
      Tags:
        - Key: 'Name'
          Value: 'Basic_ALBSecurityGroup'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
#ALBを定義しています。
#LoadBalancerAttributesこの値が具体的に何に使用されるものか現在わかっていません。ただ必須の設定項目ではないため定義しなくても問題はありません。
  cfnLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Type: 'application'
      Name: 'talkie-infra-ALB'
      SecurityGroups: [!Ref cfnALBSecurityGroup]
      IpAddressType: 'ipv4'
      Scheme: 'internet-facing'
      Subnets:
        - !Ref cfnSubnet11
        - !Ref cfnSubnet12
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 140
#ALBで使用するTargetGroupを定義しています。
  cfnTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Name: 'talkie-infra-TargetGroup'
      VpcId: !Ref cfnVpc
      Port: 80
      Protocol: HTTP
      # HealthCheck
      #HealthCheckIntervalSeconds　何秒毎にヘルスチェックを行うか
      #HealthCheckPath　何に対してヘルスチェックを行うか
      #HealthCheckPort ヘルスチェックに使用するポート
      #HealthCheckTimeoutSeconds　許容する応答までの秒数
      #HealthyThresholdCount　指定した回数応答できれば正常な状態です
      #UnhealthyThresholdCount　指定した回数応答できなければ異常な状態です
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: '/'
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      Matcher:
          HttpCode: '200'
      Targets:
        - Id: !Ref cfnEC2Instance11
          Port: 80
